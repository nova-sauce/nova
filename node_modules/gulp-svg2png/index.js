///<reference path='./typings/main.d.ts'/>
/*
 * gulp-svg2png
 *
 * Copyright(c) 2014-2015 André König <andre.koenig@posteo.de>
 * MIT Licensed
 *
 */
/**
 * @author André König <andre.koenig@posteo.de>
 *
 */
'use strict';
var path = require('path');
var os = require('os');
var fs = require('fs');
var svg2png = require('svg2png');
var gutil = require('gulp-util');
var index_1 = require('./lib/index');
var map_limit = require('map-stream-limit');
var map = require('map-stream');
var PLUGIN_NAME = require('./package.json').name;
var Command = (function () {
    function Command(scale, verbose) {
        if (scale === void 0) { scale = 1.0; }
        if (verbose === void 0) { verbose = true; }
        this.scale = scale;
        this.verbose = verbose;
    }
    /**
     * Wrapper around gutil logger.
     * Logs if logging is enabled.
     *
     * @param {string} message The log message
     *
     */
    Command.prototype.log = function (message) {
        if (this.verbose) {
            gutil.log(message);
        }
    };
    /**
     * Just a global error function.
     *
     * @param {string} message The error message
     *
     */
    Command.prototype.error = function (message) {
        throw new gutil.PluginError(PLUGIN_NAME, message);
    };
    /**
     * Renames the SVG file to a PNG file (extension)
     *
     * @param {string} filename The file name of the SVG
     *
     * @return {string} The file name with the PNG file extension.
     *
     */
    Command.prototype.rename = function (filename) {
        return filename.replace(path.extname(filename), '.png');
    };
    Command.prototype.execute = function (source, cb) {
        var _this = this;
        var temp = path.join(os.tmpdir(), index_1.UUID.generate() + '-' + this.rename(path.basename(source.path)));
        var png;
        var done = function (err) {
            if (err) {
                return _this.error(err.toString());
            }
            _this.log('Converted file: ' + png.path);
            cb(null, png);
        };
        var buffered = function (err, data) {
            png = new gutil.File({
                base: source.base,
                path: _this.rename(source.path),
                contents: data
            });
            // Cleanup - Delete the temp file.
            fs.unlink(temp, done);
        };
        var converted = function (err) {
            if (err) {
                return _this.error('Error while converting image.' + err);
            }
            fs.readFile(temp, buffered);
        };
        if (!index_1.SVG.is(source.contents)) {
            return this.error('Source is not a SVG file.');
        }
        // Writes the file to the temp directory.
        svg2png(source.path, temp, this.scale, converted);
    };
    return Command;
}());
module.exports = function (scale, verbose, concurrency) {
    if (scale === void 0) { scale = 1.0; }
    if (verbose === void 0) { verbose = true; }
    if (concurrency === void 0) { concurrency = null; }
    var cmd = new Command(scale, verbose);
    if (concurrency) {
        return map_limit(cmd.execute.bind(cmd), concurrency);
    }
    else {
        return map(cmd.execute.bind(cmd));
    }
};
