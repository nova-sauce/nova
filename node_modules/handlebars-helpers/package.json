{
  "_args": [
    [
      "handlebars-helpers@github:assemble/handlebars-helpers#dev",
      "/Users/sgrimaldo/Sites/nova"
    ]
  ],
  "_from": "assemble/handlebars-helpers#dev",
  "_id": "handlebars-helpers@0.6.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/handlebars-helpers",
  "_phantomChildren": {
    "kind-of": "3.0.4",
    "set-getter": "0.1.0"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/assemble/handlebars-helpers/dev/package.json",
      "gitUrl": "git://github.com/assemble/handlebars-helpers.git#dev",
      "httpsUrl": "git+https://github.com/assemble/handlebars-helpers.git#dev",
      "shortcut": "github:assemble/handlebars-helpers#dev",
      "ssh": "git@github.com:assemble/handlebars-helpers.git#dev",
      "sshUrl": "git+ssh://git@github.com/assemble/handlebars-helpers.git#dev",
      "type": "github"
    },
    "name": "handlebars-helpers",
    "raw": "handlebars-helpers@github:assemble/handlebars-helpers#dev",
    "rawSpec": "github:assemble/handlebars-helpers#dev",
    "scope": null,
    "spec": "github:assemble/handlebars-helpers#dev",
    "type": "hosted"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/assemble/handlebars-helpers.git#a4c8207a525d7b3271a0f022a33be4d090886c3a",
  "_shasum": "228a0d7cb5656a1928a4ccf99243723e782b631c",
  "_shrinkwrap": null,
  "_spec": "handlebars-helpers@github:assemble/handlebars-helpers#dev",
  "_where": "/Users/sgrimaldo/Sites/nova",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "bugs": {
    "url": "https://github.com/assemble/handlebars-helpers/issues"
  },
  "dependencies": {
    "arr-filter": "^1.1.1",
    "arr-flatten": "^1.0.1",
    "array-sort": "^0.1.2",
    "create-frame": "^0.1.2",
    "define-property": "^0.2.5",
    "export-files": "^2.1.1",
    "for-in": "^0.1.5",
    "for-own": "^0.1.4",
    "get-object": "^0.2.0",
    "get-value": "^2.0.5",
    "helper-date": "^0.2.2",
    "helper-markdown": "^0.2.1",
    "helper-md": "^0.2.0",
    "html-tag": "^0.2.1",
    "index-of": "^0.2.0",
    "is-even": "^0.1.1",
    "is-glob": "^2.0.1",
    "is-number": "^2.1.0",
    "is-odd": "^0.1.0",
    "kind-of": "^3.0.3",
    "lazy-cache": "^2.0.1",
    "logging-helpers": "^0.4.0",
    "make-iterator": "^0.2.0",
    "micromatch": "^2.3.8",
    "mixin-deep": "^1.1.3",
    "normalize-path": "^2.0.1",
    "relative": "^3.0.2",
    "striptags": "^2.1.1",
    "to-gfm-code-block": "^0.1.1"
  },
  "description": "More than 130 Handlebars helpers in ~20 categories. Helpers can be used with Assemble, YUI, Ghost or any node.js/Handlebars project.",
  "devDependencies": {
    "fs-exists-sync": "^0.1.0",
    "gulp": "^3.9.1",
    "gulp-eslint": "^2.0.0",
    "gulp-format-md": "^0.1.9",
    "gulp-istanbul": "^0.10.4",
    "gulp-mocha": "^2.2.0",
    "gulp-unused": "^0.1.2",
    "handlebars": "^4.0.5",
    "helper-coverage": "^0.1.3",
    "markdown-link": "^0.1.1",
    "mocha": "^2.4.5",
    "should": "^8.3.1",
    "template-helpers": "^0.6.3",
    "through2": "^2.0.1",
    "verb-readme-generator": "^0.1.12"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "gitHead": "a4c8207a525d7b3271a0f022a33be4d090886c3a",
  "homepage": "https://github.com/assemble/handlebars-helpers",
  "keywords": [
    "assemble",
    "block",
    "code",
    "collections",
    "comparisons",
    "custom",
    "data",
    "dates",
    "escape",
    "example",
    "files",
    "handlebars",
    "helper",
    "helpers",
    "html",
    "i-n",
    "index",
    "inflections",
    "js",
    "library",
    "list",
    "logging",
    "loop",
    "markdown",
    "math",
    "miscellaneous",
    "numbers",
    "path",
    "prettify",
    "repeat",
    "strings",
    "template",
    "url"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "Brian Woodward",
      "url": "https://github.com/doowb"
    },
    {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    }
  ],
  "name": "handlebars-helpers",
  "optionalDependencies": {},
  "readme": "# handlebars-helpers [![NPM version](https://img.shields.io/npm/v/handlebars-helpers.svg?style=flat)](https://www.npmjs.com/package/handlebars-helpers) [![NPM downloads](https://img.shields.io/npm/dm/handlebars-helpers.svg?style=flat)](https://npmjs.org/package/handlebars-helpers) [![Build Status](https://img.shields.io/travis/assemble/handlebars-helpers.svg?style=flat)](https://travis-ci.org/assemble/handlebars-helpers)\n\nMore than 130 Handlebars helpers in ~20 categories. Helpers can be used with Assemble, YUI, Ghost or any node.js/Handlebars project.\n\n- [Install](#install)\n- [Usage](#usage)\n- [Helpers](#helpers)\n- [Utils](#utils)\n- [Related projects](#related-projects)\n- [Contributing](#contributing)\n- [Building docs](#building-docs)\n- [Running tests](#running-tests)\n- [Author](#author)\n- [License](#license)\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install handlebars-helpers --save\n```\n\n## Usage\n\nThe main export returns a function that needs to be called to expose the object of helpers.\n\n```js\nvar helpers = require('handlebars-helpers')();\n//=> returns object with all (130+) helpers\n```\n\n**Get a specific collection**\n\nHelper collections are exposed as getters, so only the helpers you want will be required and loaded.\n\n```js\nvar helpers = require('handlebars-helpers');\nvar math = helpers.math();\n//=> only the `math` helpers\n\nvar helpers = require('handlebars-helpers');\nvar array = helpers.array();\n//=> only the `collections` helpers\n```\n\n**Optionally pass your own handlebars**\n\n```js\nvar handlebars = require('handlebars');\nvar helpers = require('handlebars-helpers')({\n  handlebars: handlebars\n});\n\n// or for a specific collection\nvar math = helpers.math({\n  handlebars: handlebars\n});\n```\n\n## Helpers\n\n## Categories\n\nCurrently **139 helpers** in **19 categories**:\n\n* **[array](#array)** ([code](lib/array.js) | [unit tests](test/array.js))\n* **[code](#code)** ([code](lib/code.js) | [unit tests](test/code.js))\n* **[collection](#collection)** ([code](lib/collection.js) | [unit tests](test/collection.js))\n* **[comparison](#comparison)** ([code](lib/comparison.js) | [unit tests](test/comparison.js))\n* **[date](#date)** ([code](lib/date.js) | [unit tests](test/date.js))\n* **[fs](#fs)** ([code](lib/fs.js) | [unit tests](test/fs.js))\n* **[html](#html)** ([code](lib/html.js) | [unit tests](test/html.js))\n* **[i18n](#i18n)** ([code](lib/i18n.js) | [unit tests](test/i18n.js))\n* **[inflection](#inflection)** ([code](lib/inflection.js) | [unit tests](test/inflection.js))\n* **[logging](#logging)** ([code](lib/logging.js) | [unit tests](test/logging.js))\n* **[markdown](#markdown)** ([code](lib/markdown.js) | [unit tests](test/markdown.js))\n* **[match](#match)** ([code](lib/match.js) | [unit tests](test/match.js))\n* **[math](#math)** ([code](lib/math.js) | [unit tests](test/math.js))\n* **[misc](#misc)** ([code](lib/misc.js) | [unit tests](test/misc.js))\n* **[number](#number)** ([code](lib/number.js) | [unit tests](test/number.js))\n* **[object](#object)** ([code](lib/object.js) | [unit tests](test/object.js))\n* **[path](#path)** ([code](lib/path.js) | [unit tests](test/path.js))\n* **[string](#string)** ([code](lib/string.js) | [unit tests](test/string.js))\n* **[url](#url)** ([code](lib/url.js) | [unit tests](test/url.js))\n\n## All helpers\n\n### [array helpers](#array)\n\nVisit the: [code](lib/array.js) | [unit tests](test/array.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+array+helpers))\n\n* **[after](#after)** ([code](lib/array.js#L26) | [tests](test/array.js#L11))\n* **[arrayify](#arrayify)** ([code](lib/array.js#L43) | [tests](test/array.js#L27))\n* **[before](#before)** ([code](lib/array.js#L62) | [tests](test/array.js#L34))\n* **[eachIndex](#eachIndex)** ([code](lib/array.js#L80) | [tests](test/array.js#L56))\n* **[filter](#filter)** ([code](lib/array.js#L106) | [tests](test/array.js#L89))\n* **[first](#first)** ([code](lib/array.js#L147) | [tests](test/array.js#L63))\n* **[forEach](#forEach)** ([code](lib/array.js#L190) | [tests](test/array.js#L121))\n* **[inArray](#inArray)** ([code](lib/array.js#L232) | [tests](test/array.js#L158))\n* **[isArray](#isArray)** ([code](lib/array.js#L252) | [tests](test/array.js#L170))\n* **[join](#join)** ([code](lib/array.js#L274) | [tests](test/array.js#L180))\n* **[last](#last)** ([code](lib/array.js#L296) | [tests](test/array.js#L195))\n* **[lengthEqual](#lengthEqual)** ([code](lib/array.js#L318) | [tests](test/array.js#L209))\n* **[map](#map)** ([code](lib/array.js#L345) | [tests](test/array.js#L246))\n* **[some](#some)** ([code](lib/array.js#L380) | [tests](test/array.js#L221))\n* **[sort](#sort)** ([code](lib/array.js#L410) | [tests](test/array.js#L275))\n* **[sortBy](#sortBy)** ([code](lib/array.js#L437) | [tests](test/array.js#L300))\n* **[withAfter](#withAfter)** ([code](lib/array.js#L463) | [tests](test/array.js#L332))\n* **[withBefore](#withBefore)** ([code](lib/array.js#L491) | [tests](test/array.js#L339))\n* **[withFirst](#withFirst)** ([code](lib/array.js#L514) | [tests](test/array.js#L346))\n* **[withLast](#withLast)** ([code](lib/array.js#L548) | [tests](test/array.js#L360))\n* **[withSort](#withSort)** ([code](lib/array.js#L583) | [tests](test/array.js#L374))\n\n### [code helpers](#code)\n\nVisit the: [code](lib/code.js) | [unit tests](test/code.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+code+helpers))\n\n* **[embed](#embed)** ([code](lib/code.js#L31) | [tests](test/code.js#L9))\n* **[gist](#gist)** ([code](lib/code.js#L56) | [tests](test/code.js#L61))\n* **[jsfiddle](#jsfiddle)** ([code](lib/code.js#L72) | [tests](test/code.js#L68))\n\n### [collection helpers](#collection)\n\nVisit the: [code](lib/collection.js) | [unit tests](test/collection.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+collection+helpers))\n\n* **[isEmpty](#isEmpty)** ([code](lib/collection.js#L28) | [tests](test/collection.js#L11))\n* **[iterate](#iterate)** ([code](lib/collection.js#L56) | [tests](test/collection.js#L38))\n* **[length](#length)** ([code](lib/collection.js#L77) | [tests](test/collection.js#L77))\n\n### [comparison helpers](#comparison)\n\nVisit the: [code](lib/comparison.js) | [unit tests](test/comparison.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+comparison+helpers))\n\n* **[and](#and)** ([code](lib/comparison.js#L26) | [tests](test/comparison.js#L10))\n* **[compare](#compare)** ([code](lib/comparison.js#L48) | [tests](test/comparison.js#L22))\n* **[contains](#contains)** ([code](lib/comparison.js#L119) | [tests](test/comparison.js#L148))\n* **[gt](#gt)** ([code](lib/comparison.js#L146) | [tests](test/comparison.js#L175))\n* **[gte](#gte)** ([code](lib/comparison.js#L174) | [tests](test/comparison.js#L206))\n* **[has](#has)** ([code](lib/comparison.js#L197) | [tests](test/comparison.js#L221))\n* **[eq](#eq)** ([code](lib/comparison.js#L232) | [tests](test/comparison.js#L279))\n* **[ifEven](#ifEven)** ([code](lib/comparison.js#L260) | [tests](test/comparison.js#L296))\n* **[ifNth](#ifNth)** ([code](lib/comparison.js#L279) | [tests](test/comparison.js#L308))\n* **[ifOdd](#ifOdd)** ([code](lib/comparison.js#L304) | [tests](test/comparison.js#L331))\n* **[is](#is)** ([code](lib/comparison.js#L323) | [tests](test/comparison.js#L343))\n* **[isnt](#isnt)** ([code](lib/comparison.js#L347) | [tests](test/comparison.js#L360))\n* **[lt](#lt)** ([code](lib/comparison.js#L373) | [tests](test/comparison.js#L377))\n* **[lte](#lte)** ([code](lib/comparison.js#L401) | [tests](test/comparison.js#L404))\n* **[neither](#neither)** ([code](lib/comparison.js#L426) | [tests](test/comparison.js#L439))\n* **[or](#or)** ([code](lib/comparison.js#L447) | [tests](test/comparison.js#L451))\n* **[unlessEq](#unlessEq)** ([code](lib/comparison.js#L467) | [tests](test/comparison.js#L463))\n* **[unlessGt](#unlessGt)** ([code](lib/comparison.js#L486) | [tests](test/comparison.js#L474))\n* **[unlessLt](#unlessLt)** ([code](lib/comparison.js#L505) | [tests](test/comparison.js#L485))\n* **[unlessGteq](#unlessGteq)** ([code](lib/comparison.js#L524) | [tests](test/comparison.js#L496))\n* **[unlessLteq](#unlessLteq)** ([code](lib/comparison.js#L543) | [tests](test/comparison.js#L511))\n\n### [date helpers](#date)\n\nVisit the: [code](lib/date.js) | [unit tests](test/date.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+date+helpers))\n\n* **[moment](#moment)** ([code](lib/date.js#L15) | [no tests])\n\n### [fs helpers](#fs)\n\nVisit the: [code](lib/fs.js) | [unit tests](test/fs.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+fs+helpers))\n\n* **[fileSize](#fileSize)** ([code](lib/fs.js#L27) | [tests](test/fs.js#L16))\n* **[read](#read)** ([code](lib/fs.js#L63) | [tests](test/fs.js#L55))\n* **[readdir](#readdir)** ([code](lib/fs.js#L76) | [tests](test/fs.js#L62))\n\n### [html helpers](#html)\n\nVisit the: [code](lib/html.js) | [unit tests](test/html.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+html+helpers))\n\n* **[css](#css)** ([code](lib/html.js#L23) | [tests](test/html.js#L12))\n* **[ellipsis](#ellipsis)** ([code](lib/html.js#L66) | [tests](test/html.js#L55))\n* **[js](#js)** ([code](lib/html.js#L88) | [tests](test/html.js#L70))\n* **[sanitize](#sanitize)** ([code](lib/html.js#L120) | [tests](test/html.js#L99))\n* **[truncate](#truncate)** ([code](lib/html.js#L142) | [tests](test/html.js#L109))\n* **[ul](#ul)** ([code](lib/html.js#L162) | [tests](test/html.js#L133))\n* **[ol](#ol)** ([code](lib/html.js#L178) | [tests](test/html.js#L140))\n* **[thumbnailImage](#thumbnailImage)** ([code](lib/html.js#L197) | [tests](test/html.js#L147))\n\n### [i18n helpers](#i18n)\n\nVisit the: [code](lib/i18n.js) | [unit tests](test/i18n.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+i18n+helpers))\n\n* **[i18n](#i18n)** ([code](lib/i18n.js#L22) | [tests](test/i18n.js#L10))\n\n### [inflection helpers](#inflection)\n\nVisit the: [code](lib/inflection.js) | [unit tests](test/inflection.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+inflection+helpers))\n\n* **[inflect](#inflect)** ([code](lib/inflection.js#L21) | [tests](test/inflection.js#L8))\n* **[ordinalize](#ordinalize)** ([code](lib/inflection.js#L50) | [tests](test/inflection.js#L21))\n\n### [logging helpers](#logging)\n\nVisit the: [code](lib/logging.js) | [unit tests](test/logging.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+logging+helpers))\n\n* **[log](#log)** ([code](lib/logging.js#Lundefined) | [no tests])\n* **[info](#info)** ([code](lib/logging.js#Lundefined) | [no tests])\n* **[bold](#bold)** ([code](lib/logging.js#Lundefined) | [no tests])\n* **[warn](#warn)** ([code](lib/logging.js#Lundefined) | [no tests])\n* **[error](#error)** ([code](lib/logging.js#Lundefined) | [no tests])\n* **[debug](#debug)** ([code](lib/logging.js#Lundefined) | [no tests])\n* **[_inspect](#_inspect)** ([code](lib/logging.js#Lundefined) | [no tests])\n\n### [markdown helpers](#markdown)\n\nVisit the: [code](lib/markdown.js) | [unit tests](test/markdown.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+markdown+helpers))\n\n### [match helpers](#match)\n\nVisit the: [code](lib/match.js) | [unit tests](test/match.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+match+helpers))\n\n* **[mm](#mm)** ([code](lib/match.js#L26) | [tests](test/match.js#L15))\n* **[match](#match)** ([code](lib/match.js#L45) | [tests](test/match.js#L14))\n* **[isMatch](#isMatch)** ([code](lib/match.js#L66) | [tests](test/match.js#L64))\n\n### [math helpers](#math)\n\nVisit the: [code](lib/math.js) | [unit tests](test/math.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+math+helpers))\n\n* **[add](#add)** ([code](lib/math.js#L19) | [tests](test/math.js#L9))\n* **[subtract](#subtract)** ([code](lib/math.js#L30) | [tests](test/math.js#L63))\n* **[divide](#divide)** ([code](lib/math.js#L42) | [tests](test/math.js#L35))\n* **[multiply](#multiply)** ([code](lib/math.js#L54) | [tests](test/math.js#L49))\n* **[floor](#floor)** ([code](lib/math.js#L65) | [tests](test/math.js#L42))\n* **[ceil](#ceil)** ([code](lib/math.js#L76) | [tests](test/math.js#L28))\n* **[round](#round)** ([code](lib/math.js#L87) | [tests](test/math.js#L56))\n* **[sum](#sum)** ([code](lib/math.js#L105) | [tests](test/math.js#L70))\n* **[avg](#avg)** ([code](lib/math.js#L131) | [no tests])\n\n### [misc helpers](#misc)\n\nVisit the: [code](lib/misc.js) | [unit tests](test/misc.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+misc+helpers))\n\n* **[default](#default)** ([code](lib/misc.js#L21) | [tests](test/misc.js#L13))\n* **[option](#option)** ([code](lib/misc.js#L40) | [tests](test/misc.js#L30))\n* **[noop](#noop)** ([code](lib/misc.js#L54) | [tests](test/misc.js#L23))\n* **[withHash](#withHash)** ([code](lib/misc.js#L68) | [tests](test/misc.js#L48))\n\n### [number helpers](#number)\n\nVisit the: [code](lib/number.js) | [unit tests](test/number.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+number+helpers))\n\n* **[addCommas](#addCommas)** ([code](lib/number.js#L19) | [tests](test/number.js#L63))\n* **[phoneNumber](#phoneNumber)** ([code](lib/number.js#L32) | [tests](test/number.js#L9))\n* **[random](#random)** ([code](lib/number.js#L50) | [tests](test/number.js#L95))\n* **[toAbbr](#toAbbr)** ([code](lib/number.js#L63) | [tests](test/number.js#L70))\n* **[toExponential](#toExponential)** ([code](lib/number.js#L97) | [tests](test/number.js#L38))\n* **[toFixed](#toFixed)** ([code](lib/number.js#L113) | [tests](test/number.js#L16))\n* **[toFloat](#toFloat)** ([code](lib/number.js#L126) | [tests](test/number.js#L56))\n* **[toInt](#toInt)** ([code](lib/number.js#L136) | [tests](test/number.js#L49))\n* **[toPrecision](#toPrecision)** ([code](lib/number.js#L146) | [tests](test/number.js#L27))\n\n### [object helpers](#object)\n\nVisit the: [code](lib/object.js) | [unit tests](test/object.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+object+helpers))\n\n* **[extend](#extend)** ([code](lib/object.js#L21) | [tests](test/object.js#L13))\n* **[forIn](#forIn)** ([code](lib/object.js#L59) | [tests](test/object.js#L31))\n* **[forOwn](#forOwn)** ([code](lib/object.js#L86) | [tests](test/object.js#L48))\n* **[get](#get)** ([code](lib/object.js#L116) | [tests](test/object.js#L75))\n* **[getObject](#getObject)** ([code](lib/object.js#L138) | [tests](test/object.js#L75))\n* **[hasOwn](#hasOwn)** ([code](lib/object.js#L157) | [tests](test/object.js#L110))\n* **[isObject](#isObject)** ([code](lib/object.js#L174) | [tests](test/object.js#L128))\n* **[merge](#merge)** ([code](lib/object.js#L190) | [tests](test/object.js#L140))\n* **[parseJSON](#parseJSON)** ([code](lib/object.js#L215) | [tests](test/object.js#L148))\n* **[pick](#pick)** ([code](lib/object.js#L230) | [tests](test/object.js#L155))\n* **[stringify](#stringify)** ([code](lib/object.js#L257) | [tests](test/object.js#L183))\n\n### [path helpers](#path)\n\nVisit the: [code](lib/path.js) | [unit tests](test/path.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+path+helpers))\n\n* **[basename](#basename)** ([code](lib/path.js#L24) | [tests](test/path.js#L9))\n* **[dirname](#dirname)** ([code](lib/path.js#L40) | [tests](test/path.js#L31))\n* **[extname](#extname)** ([code](lib/path.js#L56) | [tests](test/path.js#L20))\n* **[relative](#relative)** ([code](lib/path.js#L73) | [tests](test/path.js#L38))\n* **[segments](#segments)** ([code](lib/path.js#L97) | [tests](test/path.js#L49))\n\n### [string helpers](#string)\n\nVisit the: [code](lib/string.js) | [unit tests](test/string.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+string+helpers))\n\n* **[camelcase](#camelcase)** ([code](lib/string.js#L25) | [tests](test/string.js#L9))\n* **[capitalize](#capitalize)** ([code](lib/string.js#L43) | [tests](test/string.js#L24))\n* **[capitalizeAll](#capitalizeAll)** ([code](lib/string.js#L62) | [tests](test/string.js#L35))\n* **[center](#center)** ([code](lib/string.js#L79) | [tests](test/string.js#L46))\n* **[chop](#chop)** ([code](lib/string.js#L112) | [tests](test/string.js#L57))\n* **[dashcase](#dashcase)** ([code](lib/string.js#L130) | [tests](test/string.js#L72))\n* **[dotcase](#dotcase)** ([code](lib/string.js#L149) | [tests](test/string.js#L87))\n* **[hyphenate](#hyphenate)** ([code](lib/string.js#L167) | [tests](test/string.js#L102))\n* **[isString](#isString)** ([code](lib/string.js#L185) | [no tests])\n* **[lowercase](#lowercase)** ([code](lib/string.js#L201) | [tests](test/string.js#L113))\n* **[occurrences](#occurrences)** ([code](lib/string.js#L221) | [tests](test/string.js#L124))\n* **[pascalcase](#pascalcase)** ([code](lib/string.js#L253) | [tests](test/string.js#L135))\n* **[pathcase](#pathcase)** ([code](lib/string.js#L274) | [tests](test/string.js#L150))\n* **[plusify](#plusify)** ([code](lib/string.js#L293) | [tests](test/string.js#L165))\n* **[reverse](#reverse)** ([code](lib/string.js#L312) | [tests](test/string.js#L203))\n* **[replace](#replace)** ([code](lib/string.js#L332) | [tests](test/string.js#L184))\n* **[sentence](#sentence)** ([code](lib/string.js#L352) | [tests](test/string.js#L214))\n* **[snakecase](#snakecase)** ([code](lib/string.js#L375) | [tests](test/string.js#L225))\n* **[split](#split)** ([code](lib/string.js#L394) | [tests](test/string.js#L240))\n* **[startsWith](#startsWith)** ([code](lib/string.js#L419) | [tests](test/string.js#L281))\n* **[titleize](#titleize)** ([code](lib/string.js#L445) | [tests](test/string.js#L255))\n* **[trim](#trim)** ([code](lib/string.js#L475) | [tests](test/string.js#L266))\n* **[uppercase](#uppercase)** ([code](lib/string.js#L494) | [tests](test/string.js#L300))\n\n### [url helpers](#url)\n\nVisit the: [code](lib/url.js) | [unit tests](test/url.js) | [issues](https://github.com/assemble/handlebars-helpers/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+url+helpers))\n\n* **[encodeURI](#encodeURI)** ([code](lib/url.js#L22) | [tests](test/url.js#L33))\n* **[decodeURI](#decodeURI)** ([code](lib/url.js#L34) | [tests](test/url.js#L40))\n* **[urlResolve](#urlResolve)** ([code](lib/url.js#L48) | [tests](test/url.js#L9))\n* **[urlParse](#urlParse)** ([code](lib/url.js#L60) | [tests](test/url.js#L47))\n* **[stripQuerystring](#stripQuerystring)** ([code](lib/url.js#L73) | [tests](test/url.js#L26))\n\n***\n\n## array\n\n### [{{after}}](lib/array.js#L26)\n\nReturns all of the items in an array after the specified index. Opposite of [before](#before).\n\n**Params**\n\n* `array` **{Array}**: Collection\n* `n` **{Number}**: Starting index (number of items to exclude)\n* `returns` **{Array}**: Array exluding `n` items.\n\n**Example**\n\n```handlebars\n{{after \"['a', 'b', 'c']\" 1}}\n//=> '[\"c\"]'\n```\n\n### [{{arrayify}}](lib/array.js#L43)\n\nCast the given `value` to an array.\n\n**Params**\n\n* `value` **{any}**\n* `returns` **{Array}**\n\n**Example**\n\n```handlebars\n{{arrayify \"foo\"}}\n//=> '[\"foo\"]'\n```\n\n### [{{before}}](lib/array.js#L62)\n\nReturn all of the items in the collection before the specified count. Opposite of [after](#after).\n\n**Params**\n\n* `array` **{Array}**\n* `n` **{Number}**\n* `returns` **{Array}**: Array excluding items after the given number.\n\n**Example**\n\n```handlebars\n{{before \"['a', 'b', 'c']\" 2}}\n//=> '[\"a\", \"b\"]'\n```\n\n### [{{eachIndex}}](lib/array.js#L80)\n\n**Params**\n\n* `array` **{Array}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{#eachIndex collection}}\n  {{item}} is {{index}}\n{{/eachIndex}}\n```\n\n### [{{filter}}](lib/array.js#L106)\n\nBlock helper that filters the given array and renders the block for values that evaluate to `true`, otherwise the inverse block is returned.\n\n**Params**\n\n* `array` **{Array}**\n* `value` **{any}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{#filter array \"foo\"}}AAA{{else}}BBB{{/filter}}\n//=> 'BBB\n```\n\n### [{{first}}](lib/array.js#L147)\n\nReturns the first item, or first `n` items of an array.\n\n**Params**\n\n* `array` **{Array}**\n* `n` **{Number}**: Number of items to return, starting at `0`.\n* `returns` **{Array}**\n\n**Example**\n\n```handlebars\n{{first \"['a', 'b', 'c', 'd', 'e']\" 2}}\n//=> '[\"a\", \"b\"]'\n```\n\n### [{{forEach}}](lib/array.js#L190)\n\nIterates over each item in an array and exposes the current item in the array as context to the inner block. In addition to the current array item, the helper exposes the following variables to the inner block:\n\n* `index`\n* `total`\n* `isFirst`\n* `isLast`\nAlso, `@index` is exposed as a private variable, and additional\nprivate variables may be defined as hash arguments.\n\n**Params**\n\n* `array` **{Array}**\n* `returns` **{String}**\n\n**Example**\n\n```js\nvar accounts = [\n{'name': 'John', 'email': 'john@example.com'},\n{'name': 'Malcolm', 'email': 'malcolm@example.com'},\n{'name': 'David', 'email': 'david@example.com'}\n];\n\n// example usage\n// {{#forEach accounts}}\n//   <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\">\n//     {{ name }}\n//   </a>{{#unless isLast}}, {{/unless}}\n// {{/forEach}}\n```\n\n### [{{inArray}}](lib/array.js#L232)\n\nBlock helper that renders the block if an array has the given `value`. Optionally specify an inverse block to render when the array does not have the given value.\n\nGiven the array `['a', 'b', 'c']`:\n\n**Params**\n\n* `array` **{Array}**\n* `value` **{any}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{#inArray array \"d\"}}\n  foo\n{{else}}\n  bar\n{{/inArray}}\n```\n\n### [{{isArray}}](lib/array.js#L252)\n\nReturns true if `value` is an es5 array.\n\n**Params**\n\n* `value` **{any}**: The value to test.\n* `returns` **{Boolean}**\n\n**Example**\n\n```handlebars\n{{isArray \"abc\"}}\n//=> 'false'\n```\n\n### [{{join}}](lib/array.js#L274)\n\nJoin all elements of array into a string, optionally using a given separator.\n\n**Params**\n\n* `array` **{Array}**\n* `sep` **{String}**: The separator to use.\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{join \"['a', 'b', 'c']\"}}\n//=> 'a, b, c'\n\n{{join \"['a', 'b', 'c']\" '-'}}\n//=> 'a-b-c'\n```\n\n### [{{last}}](lib/array.js#L296)\n\nReturns the last item, or last `n` items of an array. Opposite of [first](#first).\n\n**Params**\n\n* `array` **{Array}**\n* `n` **{Number}**: Number of items to return, starting with the last item.\n* `returns` **{Array}**\n\n**Example**\n\n```handlebars\n{{last \"['a', 'b', 'c', 'd', 'e']\" 2}}\n//=> '[\"d\", \"e\"]'\n```\n\n### [{{lengthEqual}}](lib/array.js#L318)\n\nBlock helper that compares the length of the given array to\nthe number passed as the second argument. If the array length\nis equal to the given `length`, the block is returned,\notherwise an inverse block may optionally be returned.\n\n**Params**\n\n* `array` **{Array}**\n* `length` **{Number}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{map}}](lib/array.js#L345)\n\nReturns a new array, created by calling `function` on each element of the given `array`.\n\n**Params**\n\n* `array` **{Array}**\n* `fn` **{Function}**\n* `returns` **{String}**\n\n**Example**\n\n```js\n// register `double` as a helper\nfunction double(str) {\n  return str + str;\n}\n// then used like this:\n// {{map \"['a', 'b', 'c']\" double}}\n//=> '[\"aa\", \"bb\", \"cc\"]'\n```\n\n### [{{some}}](lib/array.js#L380)\n\nBlock helper that returns the block if the callback returns true for some value in the given array.\n\n**Params**\n\n* `array` **{Array}**\n* `cb` **{Function}**: callback function\n* **{Options}**: Handlebars provided options object\n* `returns` **{Array}**\n\n**Example**\n\n```handlebars\n{{#some array isString}}\n  Render me if the array has a string.\n{{else}}\n  Render me if it doesn't.\n{{/some}}\n```\n\n### [{{sort}}](lib/array.js#L410)\n\nSort the given `array`. If an array of objects is passed, you may optionally pass a `key` to sort on as the second argument. You may alternatively pass a sorting function as the second argument.\n\n**Params**\n\n* `array` **{Array}**: the array to sort.\n* `key` **{String|Function}**: The object key to sort by, or sorting function.\n\n**Example**\n\n```handlebars\n{{sort \"['b', 'a', 'c']\"}}\n//=> 'a,b,c'\n```\n\n### [{{sortBy}}](lib/array.js#L437)\n\nSort an `array`. If an array of objects is passed, you may optionally pass a `key` to sort on as the second argument. You may alternatively pass a sorting function as the second argument.\n\n**Params**\n\n* `array` **{Array}**: the array to sort.\n* `props` **{String|Function}**: One or more properties to sort by, or sorting functions to use.\n\n**Example**\n\n```handlebars\n{{sortBy '[\"b\", \"a\", \"c\"]'}}\n//=> 'a,b,c'\n\n{{sortBy '[{a: \"zzz\"}, {a: \"aaa\"}]' \"a\"}}\n//=> '[{\"a\":\"aaa\"},{\"a\":\"zzz\"}]'\n```\n\n### [{{withAfter}}](lib/array.js#L463)\n\nUse the items in the array _after_ the specified index\nas context inside a block. Opposite of [withBefore](#withBefore).\n\n**Params**\n\n* `array` **{Array}**\n* `idx` **{Number}**\n* `options` **{Object}**\n* `returns` **{Array}**\n\n### [{{withBefore}}](lib/array.js#L491)\n\nUse the items in the array _before_ the specified index as context inside a block.Opposite of [withAfter](#withAfter).\n\n**Params**\n\n* `array` **{Array}**\n* `idx` **{Number}**\n* `options` **{Object}**\n* `returns` **{Array}**\n\n**Example**\n\n```handlebars\n{{#withBefore array 3}}\n  {{this}}\n{{/withBefore}}\n```\n\n### [{{withFirst}}](lib/array.js#L514)\n\nUse the first item in a collection inside a handlebars\nblock expression. Opposite of [withLast](#withLast).\n\n**Params**\n\n* `array` **{Array}**\n* `idx` **{Number}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{withLast}}](lib/array.js#L548)\n\nUse the last item or `n` items in an array as context inside a block.\nOpposite of [withFirst](#withFirst).\n\n**Params**\n\n* `array` **{Array}**\n* `idx` **{Number}**: The starting index.\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{withSort}}](lib/array.js#L583)\n\nBlock helper that sorts a collection and exposes the sorted\ncollection as context inside the block.\n\n**Params**\n\n* `array` **{Array}**\n* `prop` **{String}**\n* `options` **{Object}**: Specify `reverse=\"true\"` to reverse the array.\n* `returns` **{String}**\n\n## code\n\n### [{{embed}}](lib/code.js#L31)\n\nEmbed code from an external file as preformatted text.\n\n**Params**\n\n* `fp` **{String}**: filepath to the file to embed.\n* `language` **{String}**: Optionally specify the language to use for syntax highlighting.\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{embed 'path/to/file.js'}}\n\n// specify the language to use\n{{embed 'path/to/file.hbs' 'html')}}\n```\n\n### [{{gist}}](lib/code.js#L56)\n\nEmbed a GitHub Gist using only the id of the Gist\n\n**Params**\n\n* `id` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{gist 12345}}\n```\n\n### [{{jsfiddle}}](lib/code.js#L72)\n\nGenerate the HTML for a jsFiddle link with the given `params`\n\n**Params**\n\n* `params` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{jsfiddle id=\"0dfk10ks\" tabs=\"true\"}}\n```\n\n## collection\n\n### [{{isEmpty}}](lib/collection.js#L28)\n\nBlock helper that returns a block if the given collection is\nempty. If the collection is not empty the inverse block is returned\n(if supplied).\n\n**Params**\n\n* `collection` **{Object}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{iterate}}](lib/collection.js#L56)\n\nIterate over an array or object,\n\n**Params**\n\n* `context` **{Object|Array}**: The collection to iterate over\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{length}}](lib/collection.js#L77)\n\nReturns the length of the given collection.\n\n**Params**\n\n* `value` **{Array|Object|String}**\n* `returns` **{Number}**: The length of the value.\n\n**Example**\n\n```handlebars\n{{length \"['a', 'b', 'c']\"}}\n//=> 3\n```\n\n## comparison\n\n### [{{and}}](lib/comparison.js#L26)\n\nBlock helper that renders the block if **both** of the given values\nare truthy. If an inverse block is specified it will be rendered\nwhen falsy.\n\n**Params**\n\n* `a` **{any}**\n* `b` **{any}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**\n\n### [{{compare}}](lib/comparison.js#L48)\n\nRender a block when a comparison of the first and third\narguments returns true. The second argument is\nthe [arithemetic operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators) to use. You may also\noptionally specify an inverse block to render when falsy.\n\n**Params**\n\n* `a` **{}**\n* `operator` **{}**: The operator to use. Operators must be enclosed in quotes: `\">\"`, `\"=\"`, `\"<=\"`, and so on.\n* `b` **{}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or if specified the inverse block is rendered if falsey.\n\n### [{{contains}}](lib/comparison.js#L119)\n\nBlock helper that renders the block if `collection` has the given `value`, using strict equality (`===`) for comparison, otherwise the inverse block is rendered (if specified). If a `startIndex` is specified and is negative, it is used as the offset from the end of the collection.\n\nGiven the array `['a', 'b', 'c']`:\n\n**Params**\n\n* `collection` **{Array|Object|String}**: The collection to iterate over.\n* `value` **{any}**: The value to check for.\n* `[startIndex=0]` **{Number}**: Optionally define the starting index.\n* `options` **{Object}**: Handlebars provided options object.\n\n**Example**\n\n```handlebars\n{{#contains array \"d\"}}\n  This will not be rendered.\n{{else}}\n  This will be rendered.\n{{/contains}}\n```\n\n### [{{gt}}](lib/comparison.js#L146)\n\nBlock helper that renders a block if `a` is **greater than** `b`.\n\nIf an inverse block is specified it will be rendered when falsy.\nYou may optionally use the `compare=\"\"` hash argument for the\nsecond value.\n\n**Params**\n\n* `a` **{String}**\n* `b` **{String}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{gte}}](lib/comparison.js#L174)\n\nBlock helper that renders a block if `a` is **greater than or equal to** `b`.\n\nIf an inverse block is specified it will be rendered when falsy.\nYou may optionally use the `compare=\"\"` hash argument for the\nsecond value.\n\n**Params**\n\n* `a` **{String}**\n* `b` **{String}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{has}}](lib/comparison.js#L197)\n\nBlock helper that renders a block if `value` has `pattern`.\nIf an inverse block is specified it will be rendered when falsy.\n\n**Params**\n\n* `val` **{any}**: The value to check.\n* `pattern` **{any}**: The pattern to check for.\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**\n\n### [{{eq}}](lib/comparison.js#L232)\n\nBlock helper that renders a block if `a` is **equal to** `b`.\nIf an inverse block is specified it will be rendered when falsy.\nYou may optionally use the `compare=\"\"` hash argument for the\nsecond value.\n\n**Params**\n\n* `a` **{String}**\n* `b` **{String}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{ifEven}}](lib/comparison.js#L260)\n\nReturn true if the given vaue is an even number.\n\n**Params**\n\n* `number` **{Number}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n**Example**\n\n```handlebars\n{{#ifEven value}}\n  render A\n{{else}}\n  render B\n{{/ifEven}}\n```\n\n### [{{ifNth}}](lib/comparison.js#L279)\n\nConditionally renders a block if the remainder is zero when\n`a` operand is divided by `b`. If an inverse block is specified\nit will be rendered when the remainder is **not zero**.\n\n**Params**\n\n* **{}**: {Number}\n* **{}**: {Number}\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{ifOdd}}](lib/comparison.js#L304)\n\nBlock helper that renders a block if `value` is **an odd number**. If an inverse block is specified it will be rendered when falsy.\n\n**Params**\n\n* `value` **{Object}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n**Example**\n\n```handlebars\n{{#ifOdd value}}\n  render A\n{{else}}\n  render B\n{{/ifOdd}}\n```\n\n### [{{is}}](lib/comparison.js#L323)\n\nBlock helper that renders a block if `a` is **equal to** `b`.\nIf an inverse block is specified it will be rendered when falsy.\n\n**Params**\n\n* `a` **{any}**\n* `b` **{any}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**\n\n### [{{isnt}}](lib/comparison.js#L347)\n\nBlock helper that renders a block if `a` is **not equal to** `b`.\nIf an inverse block is specified it will be rendered when falsy.\n\n**Params**\n\n* `a` **{String}**\n* `b` **{String}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**\n\n### [{{lt}}](lib/comparison.js#L373)\n\nBlock helper that renders a block if `a` is **less than** `b`.\n\nIf an inverse block is specified it will be rendered when falsy.\nYou may optionally use the `compare=\"\"` hash argument for the\nsecond value.\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{lte}}](lib/comparison.js#L401)\n\nBlock helper that renders a block if `a` is **less than or equal to** `b`.\n\nIf an inverse block is specified it will be rendered when falsy.\nYou may optionally use the `compare=\"\"` hash argument for the\nsecond value.\n\n**Params**\n\n* `a` **{Sring}**\n* `b` **{Sring}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{neither}}](lib/comparison.js#L426)\n\nBlock helper that renders a block if **neither of** the given values\nare truthy. If an inverse block is specified it will be rendered\nwhen falsy.\n\n**Params**\n\n* `a` **{any}**\n* `b` **{any}**\n* `options` **{}**: Handlebars options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{or}}](lib/comparison.js#L447)\n\nBlock helper that renders a block if **either of** the given values\nis truthy. If an inverse block is specified it will be rendered\nwhen falsy.\n\n**Params**\n\n* `a` **{any}**\n* `b` **{any}**\n* `options` **{}**: Handlebars options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{unlessEq}}](lib/comparison.js#L467)\n\nBlock helper that always renders the inverse block **unless `a` is\nis equal to `b`**.\n\n**Params**\n\n* `a` **{String}**\n* `b` **{String}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Inverse block by default, or block if falsey.\n\n### [{{unlessGt}}](lib/comparison.js#L486)\n\nBlock helper that always renders the inverse block **unless `a` is\nis greater than `b`**.\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Inverse block by default, or block if falsey.\n\n### [{{unlessLt}}](lib/comparison.js#L505)\n\nBlock helper that always renders the inverse block **unless `a` is\nis less than `b`**.\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{unlessGteq}}](lib/comparison.js#L524)\n\nBlock helper that always renders the inverse block **unless `a` is\nis greater than or equal to `b`**.\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n### [{{unlessLteq}}](lib/comparison.js#L543)\n\nBlock helper that always renders the inverse block **unless `a` is\nis less than or equal to `b`**.\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**: Handlebars provided options object\n* `returns` **{String}**: Block, or inverse block if specified and falsey.\n\n## date\n\n### [{{moment}}](lib/date.js#L15)\n\nExpose `moment` helper\n\n## fs\n\n### [{{fileSize}}](lib/fs.js#L27)\n\nConverts bytes into a nice representation with unit.\n\n**Examples:**\n\n* `13661855 => 13.7 MB`\n* `825399 => 825 KB`\n* `1396 => 1 KB`\n\n**Params**\n\n* `value` **{String}**\n* `returns` **{String}**\n\n### [{{read}}](lib/fs.js#L63)\n\nRead a file from the file system.\n\n**Params**\n\n* `filepath` **{String}**\n* `returns` **{String}**\n\n### [{{readdir}}](lib/fs.js#L76)\n\nReturn an array of files from the given\ndirectory.\n\n**Params**\n\n* `directory` **{String}**\n* `returns` **{Array}**\n\n## html\n\n### [{{css}}](lib/html.js#L23)\n\nAdd an array of `<link>` tags. Automatically resolves\nrelative paths to `options.assets` if passed on the context.\n\n**Params**\n\n* `context` **{Object}**\n* `returns` **{String}**\n\n### [{{ellipsis}}](lib/html.js#L66)\n\nTruncates a string to the specified `length`, and appends it with an elipsis, `…`.\n\n**Params**\n\n* `str` **{String}**\n* `length` **{Number}**: The desired length of the returned string.\n* `returns` **{String}**: The truncated string.\n\n**Example**\n\n```js\n{{ellipsis \"<span>foo bar baz</span>\", 7}}\n//=> 'foo bar…'\n```\n\n### [{{js}}](lib/html.js#L88)\n\nGenerate one or more `<script></script>` tags with paths/urls to javascript or coffeescript files.\n\n**Params**\n\n* `context` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{js scripts}}\n```\n\n### [{{sanitize}}](lib/html.js#L120)\n\nStrip HTML tags from a string, so that only the text nodes are preserved.\n\n**Params**\n\n* `str` **{String}**: The string of HTML to sanitize.\n* `returns` **{String}**\n\n**Example**\n\n```js\n{{sanitize \"<span>foo</span>\"}}\n//=> 'foo'\n```\n\n### [{{truncate}}](lib/html.js#L142)\n\nTruncate a string by removing all HTML tags and limiting the result to the specified `length`. Aslo see [ellipsis](#ellipsis).\n\n**Params**\n\n* `str` **{String}**\n* `limit` **{Number}**: The desired length of the returned string.\n* `suffix` **{String}**: Optionally supply a string to use as a suffix to denote when the string has been truncated.\n* `returns` **{String}**: The truncated string.\n\n**Example**\n\n```js\ntruncate(\"<span>foo bar baz</span>\", 7);\n//=> 'foo bar'\n```\n\n### [{{ul}}](lib/html.js#L162)\n\nBlock helper for creating unordered lists (`<ul></ul>`)\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{ol}}](lib/html.js#L178)\n\nBlock helper for creating ordered lists  (`<ol></ol>`)\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{thumbnailImage}}](lib/html.js#L197)\n\nReturns a `<figure>` with a thumbnail linked to a full picture\n\n**Params**\n\n* `context` **{Object}**: Object with values/attributes to add to the generated elements:\n* `context.alt` **{String}**\n* `context.src` **{String}**\n* `context.width` **{Number}**\n* `context.height` **{Number}**\n* `returns` **{String}**: HTML `<figure>` element with image and optional caption/link.\n\n## i18n\n\n### [{{i18n}}](lib/i18n.js#L22)\n\ni18n helper. See [button-i18n](https://github.com/assemble/buttons)\nfor a working example.\n\n**Params**\n\n* `key` **{String}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n## inflection\n\n### [{{inflect}}](lib/inflection.js#L21)\n\n**Params**\n\n* `count` **{Number}**\n* `singular` **{String}**: The singular form\n* `plural` **{String}**: The plural form\n* `include` **{String}**\n* `returns` **{String}**\n\n### [{{ordinalize}}](lib/inflection.js#L50)\n\nReturns an ordinalized number (as a string).\n\n**Params**\n\n* `val` **{String}**: The value to ordinalize.\n* `returns` **{String}**: The ordinalized number\n\n**Example**\n\n```handlebars\n{{ordinalize 1}}\n//=> '1st'\n{{ordinalize 21}}\n//=> '21st'\n{{ordinalize 29}}\n//=> '29th'\n{{ordinalize 22}}\n//=> '22nd'\n```\n\n## logging\n\n[logging-helpers](https://github.com/helpers/logging-helpers).\n\n## markdown\n\n### [{{markdown}}](lib/markdown.js#L29)\n\nBlock helper that converts a string of inline markdown to HTML.\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```html\n{{#markdown}}\n# Foo\n{{/markdown}}\n//=> <h1>Foo</h1>\n```\n\n### [{{md}}](lib/markdown.js#L54)\n\nRead a markdown file from the file system and inject its contents after converting it to HTML.\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n**Example**\n\n```html\n{{md \"foo/bar.md\"}}\n```\n\n## match\n\n### [{{mm}}](lib/match.js#L26)\n\nThe main function. Pass an array of filepaths, and a string or array of glob patterns. Options may be passed on the hash or on `this.options`.\n\n**Params**\n\n* `files` **{Array|String}**\n* `patterns` **{Array|String}**: One or more glob patterns.\n* `options` **{Object}**\n* `returns` **{Array}**: Array of matches\n\n**Example**\n\n```handlebars\n{{match (readdir \"foo\") \"*.js\"}}\n```\n\n### [{{match}}](lib/match.js#L45)\n\nReturns an array of files that match the given glob pattern. Options may be passed on the hash or on `this.options`.\n\n**Params**\n\n* `files` **{Array}**\n* `pattern` **{String}**\n* `options` **{Object}**\n* `returns` **{Array}**\n\n**Example**\n\n```handlebars\n{{match (readdir \"foo\") \"*.js\"}}\n```\n\n### [{{isMatch}}](lib/match.js#L66)\n\nReturns true if a filepath contains the given pattern. Options may be passed on the hash or on `this.options`.\n\n**Params**\n\n* `filepath` **{String}**\n* `pattern` **{String}**\n* `options` **{Object}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\n{{isMatch \"foo.md\" \"*.md\"}}\n//=> true\n```\n\n## math\n\n### [{{add}}](lib/math.js#L19)\n\nReturn the product of `a` plus `b`.\n\n**Params**\n\n* `a` **{Number}**\n* `b` **{Number}**\n\n### [{{subtract}}](lib/math.js#L30)\n\nReturn the product of `a` minus `b`.\n\n**Params**\n\n* **{Number}**: a\n\n### [{{divide}}](lib/math.js#L42)\n\nDivide `a` by `b`\n\n**Params**\n\n* `a` **{Number}**: numerator\n* `b` **{Number}**: denominator\n\n### [{{multiply}}](lib/math.js#L54)\n\nMultiply `a` by `b`.\n\n**Params**\n\n* `a` **{Number}**: factor\n* `b` **{Number}**: multiplier\n\n### [{{floor}}](lib/math.js#L65)\n\nGet the `Math.floor()` of the given value.\n\n**Params**\n\n* `value` **{Number}**\n\n### [{{ceil}}](lib/math.js#L76)\n\nGet the `Math.ceil()` of the given value.\n\n**Params**\n\n* `value` **{Number}**\n\n### [{{round}}](lib/math.js#L87)\n\nRound the given value.\n\n**Params**\n\n* `value` **{Number}**\n\n### [{{sum}}](lib/math.js#L105)\n\nReturns the sum of all numbers in the given array.\n\n**Params**\n\n* `array` **{Array}**: Array of numbers to add up.\n* `returns` **{Number}**\n\n**Example**\n\n```handlebars\n{{sum \"[1, 2, 3, 4, 5]\"}}\n//=> '15'\n```\n\n### [{{avg}}](lib/math.js#L131)\n\nReturns the average of all numbers in the given array.\n\n**Params**\n\n* `array` **{Array}**: Array of numbers to add up.\n* `returns` **{Number}**\n\n**Example**\n\n```handlebars\n{{avg \"[1, 2, 3, 4, 5]\"}}\n//=> '3'\n```\n\n## misc\n\n### [{{default}}](lib/misc.js#L21)\n\nReturns the first value if defined, otherwise the \"default\" value is returned.\n\n**Params**\n\n* `value` **{any}**\n* `defaultValue` **{any}**\n* `returns` **{String}**\n\n### [{{option}}](lib/misc.js#L40)\n\nReturn the given value of `prop` from `this.options`. Given the context `{options: {a: {b: {c: 'ddd'}}}}`\n\n**Params**\n\n* `prop` **{String}**\n* `returns` **{any}**\n\n**Example**\n\n```handlebars\n{{option \"a.b.c\"}}\n<!-- results => `ddd` -->\n```\n\n### [{{noop}}](lib/misc.js#L54)\n\nBlock helper that renders the block without taking any arguments.\n\n**Params**\n\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{withHash}}](lib/misc.js#L68)\n\nBlock helper that builds the context for the block\nfrom the options hash.\n\n**Params**\n\n* `options` **{Object}**: Handlebars provided options object.\n\n## number\n\n### [{{addCommas}}](lib/number.js#L19)\n\nAdd commas to numbers\n\n**Params**\n\n* `num` **{Number}**\n* `returns` **{Number}**\n\n### [{{phoneNumber}}](lib/number.js#L32)\n\nConvert a string or number to a formatted phone number.\n\n**Params**\n\n* `num` **{Number|String}**: The phone number to format, e.g. `8005551212`\n* `returns` **{Number}**: Formatted phone number: `(800) 555-1212`\n\n### [{{random}}](lib/number.js#L50)\n\nGenerate a random number between two values\n\n**Params**\n\n* `min` **{Number}**\n* `max` **{Number}**\n* `returns` **{String}**\n\n### [{{toAbbr}}](lib/number.js#L63)\n\nAbbreviate numbers to the given number of `precision`.\n\n**Params**\n\n* `number` **{String}**\n* `precision` **{String}**\n* `returns` **{String}**\n\n### [{{toExponential}}](lib/number.js#L97)\n\nReturns a string representing the given number in exponential notation.\n\n**Params**\n\n* `number` **{Number}**\n* `fractionDigits` **{Number}**: Optional. An integer specifying the number of digits to use after the decimal point. Defaults to as many digits as necessary to specify the number.\n* `returns` **{Number}**\n\n**Example**\n\n```js\n{{toExponential number digits}};\n```\n\n### [{{toFixed}}](lib/number.js#L113)\n\nFormats the given number using fixed-point notation.\n\n**Params**\n\n* `number` **{Number}**\n* `digits` **{Number}**: Optional. The number of digits to use after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.\n* `returns` **{Number}**\n\n### [{{toFloat}}](lib/number.js#L126)\n\n**Params**\n\n* `number` **{Number}**\n* `returns` **{Number}**\n\n### [{{toInt}}](lib/number.js#L136)\n\n**Params**\n\n* `number` **{Number}**\n* `returns` **{Number}**\n\n### [{{toPrecision}}](lib/number.js#L146)\n\n**Params**\n\n* `number` **{Number}**\n* `returns` **{Number}**\n\n## object\n\n### [{{extend}}](lib/object.js#L21)\n\nExtend the context with the properties of other objects.\nA shallow merge is performed to avoid mutating the context.\n\n**Params**\n\n* `objects` **{Object}**: One or more objects to extend.\n* `returns` **{Object}**\n\n### [{{forIn}}](lib/object.js#L59)\n\nBlock helper that iterates over the properties of\nan object, exposing each key and value on the context.\n\n**Params**\n\n* `context` **{Object}**\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{forOwn}}](lib/object.js#L86)\n\nBlock helper that iterates over the **own** properties of\nan object, exposing each key and value on the context.\n\n**Params**\n\n* `obj` **{Object}**: The object to iterate over.\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [{{get}}](lib/object.js#L116)\n\nUse property paths (`a.b.c`) to get a value or nested value from\nthe context. Works as a regular helper or block helper.\n\n**Params**\n\n* `prop` **{String}**: The property to get, optionally using dot notation for nested properties.\n* `context` **{Object}**: The context object\n* `options` **{Object}**: The handlebars options object, if used as a block helper.\n* `returns` **{String}**\n\n### [{{getObject}}](lib/object.js#L138)\n\nUse property paths (`a.b.c`) to get an object from\nthe context. Differs from the `get` helper in that this\nhelper will return the actual object, including the\ngiven property key. Also, this helper does not work as a\nblock helper.\n\n**Params**\n\n* `prop` **{String}**: The property to get, optionally using dot notation for nested properties.\n* `context` **{Object}**: The context object\n* `returns` **{String}**\n\n### [{{hasOwn}}](lib/object.js#L157)\n\nReturn true if `key` is an own, enumerable property of the given `context` object.\n\n**Params**\n\n* `key` **{String}**\n* `context` **{Object}**: The context object.\n* `returns` **{Boolean}**\n\n**Example**\n\n```handlebars\n{{hasOwn context key}}\n```\n\n### [{{isObject}}](lib/object.js#L174)\n\nReturn true if `value` is an object.\n\n**Params**\n\n* `value` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```handlebars\n{{isObject \"foo\"}}\n//=> false\n```\n\n### [{{merge}}](lib/object.js#L190)\n\nDeeply merge the properties of the given `objects` with the\ncontext object.\n\n**Params**\n\n* `object` **{Object}**: The target object. Pass an empty object to shallow clone.\n* `objects` **{Object}**\n* `returns` **{Object}**\n\n### [{{parseJSON}}](lib/object.js#L215)\n\nBlock helper that parses a string using `JSON.parse`,\nthen passes the parsed object to the block as context.\n\n**Params**\n\n* `string` **{String}**: The string to parse\n* `options` **{Object}**: Handlebars options object\n\n### [{{pick}}](lib/object.js#L230)\n\nPick properties from the context object.\n\n**Params**\n\n* `properties` **{Array|String}**: One or more proeperties to pick.\n* `context` **{Object}**\n* `options` **{Object}**: Handlebars options object.\n* `returns` **{Object}**: Returns an object with the picked values. If used as a block helper, the values are passed as context to the inner block. If no values are found, the context is passed to the inverse block.\n\n### [{{stringify}}](lib/object.js#L257)\n\nStringify an object using `JSON.stringify`.\n\n**Params**\n\n* `obj` **{Object}**: Object to stringify\n* `returns` **{String}**\n\n## path\n\n### [{{basename}}](lib/path.js#L24)\n\nGet the file extension from the given `filepath`.\n\n**Params**\n\n* `ext` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{basename \"docs/toc.md\"}}\n//=> 'toc.md'\n```\n\n### [{{dirname}}](lib/path.js#L40)\n\nGet the directory path segment from the given `filepath`.\n\n**Params**\n\n* `ext` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{dirname \"docs/toc.md\"}}\n//=> 'docs'\n```\n\n### [{{extname}}](lib/path.js#L56)\n\nGet the file extension from the given `filepath`.\n\n**Params**\n\n* `filepath` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{extname \"docs/toc.md\"}}\n//=> '.md'\n```\n\n### [{{relative}}](lib/path.js#L73)\n\nGet the relative filepath from `a` to `b`.\n\n**Params**\n\n* `a` **{String}**\n* `b` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{relative a b}}\n```\n\n### [{{segments}}](lib/path.js#L97)\n\nGet specific (joined) segments of a file path by passing a range of array indices.\n\n**Params**\n\n* `filepath` **{String}**: The file path to split into segments.\n* `returns` **{String}**: Returns a single, joined file path.\n\n**Example**\n\n```js\n{{segments \"a/b/c/d\" \"2\" \"3\"}}\n//=> 'c/d'\n\n{{segments \"a/b/c/d\" \"1\" \"3\"}}\n//=> 'b/c/d'\n\n{{segments \"a/b/c/d\" \"1\" \"2\"}}\n//=> 'b/c'\n```\n\n## string\n\n### [{{camelcase}}](lib/string.js#L25)\n\ncamelCase the characters in the given `string`.\n\n**Params**\n\n* `string` **{String}**: The string to camelcase.\n* `returns` **{String}**\n\n**Example**\n\n```js\n{{camelcase \"foo bar baz\"}};\n//=> 'fooBarBaz'\n```\n\n### [{{capitalize}}](lib/string.js#L43)\n\nCapitalize the first word in a sentence.\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{capitalize \"foo bar baz\"}}\n//=> \"Foo bar baz\"\n```\n\n### [{{capitalizeAll}}](lib/string.js#L62)\n\nCapitalize all words in a string.\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{capitalize \"foo bar baz\"}}\n//=> \"Foo Bar Baz\"\n```\n\n### [{{center}}](lib/string.js#L79)\n\nCenter a string using non-breaking spaces\n\n**Params**\n\n* `str` **{String}**\n* `spaces` **{String}**\n* `returns` **{String}**\n\n### [{{chop}}](lib/string.js#L112)\n\nLike trim, but removes both extraneous whitespace **and non-word characters** from the beginning and end of a string.\n\n**Params**\n\n* `string` **{String}**: The string to chop.\n* `returns` **{String}**\n\n**Example**\n\n```js\n{{chop \"_ABC_\"}}\n//=> 'ABC'\n\n{{chop \"-ABC-\"}}\n//=> 'ABC'\n\n{{chop \" ABC \"}}\n//=> 'ABC'\n```\n\n### [{{dashcase}}](lib/string.js#L130)\n\ndash-case the characters in `string`. Replaces non-word characters and periods with hyphens.\n\n**Params**\n\n* `string` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```js\n{{dashcase \"a-b-c d_e\"}}\n//=> 'a-b-c-d-e'\n```\n\n### [{{dotcase}}](lib/string.js#L149)\n\ndot.case the characters in `string`.\n\n**Params**\n\n* `string` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```js\n{{dotcase \"a-b-c d_e\"}}\n//=> 'a.b.c.d.e'\n```\n\n### [{{hyphenate}}](lib/string.js#L167)\n\nReplace spaces in a string with hyphens.\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{hyphenate \"foo bar baz qux\"}}\n//=> \"foo-bar-baz-qux\"\n```\n\n### [{{isString}}](lib/string.js#L185)\n\nReturn true if `value` is a string.\n\n**Params**\n\n* `value` **{String}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```handlebars\n{{isString \"foo\"}}\n//=> 'true'\n```\n\n### [{{lowercase}}](lib/string.js#L201)\n\nLowercase all characters in the given string.\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{lowercase \"Foo BAR baZ\"}}\n//=> 'foo bar baz'\n```\n\n### [{{occurrences}}](lib/string.js#L221)\n\nReturn the number of occurrances of `substring` within the given `string`.\n\n**Params**\n\n* `str` **{String}**\n* `substring` **{String}**\n* `returns` **{Number}**: Number of occurrances\n\n**Example**\n\n```handlebars\n{{occurrances \"foo bar foo bar baz\" \"foo\"}}\n//=> 2\n```\n\n### [{{pascalcase}}](lib/string.js#L253)\n\nPascalCase the characters in `string`.\n\n**Params**\n\n* `string` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```js\n{{pascalcase \"foo bar baz\"}}\n//=> 'FooBarBaz'\n```\n\n### [{{pathcase}}](lib/string.js#L274)\n\npath/case the characters in `string`.\n\n**Params**\n\n* `string` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```js\n{{pathcase \"a-b-c d_e\"}}\n//=> 'a/b/c/d/e'\n```\n\n### [{{plusify}}](lib/string.js#L293)\n\nReplace spaces in the given string with pluses.\n\n**Params**\n\n* `str` **{String}**: The input string\n* `returns` **{String}**: Input string with spaces replaced by plus signs\n\n**Example**\n\n```handlebars\n{{plusify \"foo bar baz\"}}\n//=> 'foo+bar+baz'\n```\n\n### [{{reverse}}](lib/string.js#L312)\n\nReverse a string.\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{reverse \"abcde\"}}\n//=> 'edcba'\n```\n\n### [{{replace}}](lib/string.js#L332)\n\nReplace all occurrences of `a` with `b`.\n\n**Params**\n\n* `str` **{String}**\n* `a` **{String}**\n* `b` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{replace \"a b a b a b\" \"a\" \"z\"}}\n//=> 'z b z b z b'\n```\n\n### [{{sentence}}](lib/string.js#L352)\n\nSentence case the given string\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{sentence \"hello world. goodbye world.\"}}\n//=> 'Hello world. Goodbye world.'\n```\n\n### [{{snakecase}}](lib/string.js#L375)\n\nsnake_case the characters in the given `string`.\n\n**Params**\n\n* `string` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```js\n{{snakecase \"a-b-c d_e\"}}\n//=> 'a_b_c_d_e'\n```\n\n### [{{split}}](lib/string.js#L394)\n\nSplit `string` by the given `character`.\n\n**Params**\n\n* `string` **{String}**: The string to split.\n* `returns` **{String}** `character`: Default is `,`\n\n**Example**\n\n```js\n{{split \"a,b,c\" \",\"}}\n//=> ['a', 'b', 'c']\n```\n\n### [{{startsWith}}](lib/string.js#L419)\n\nTests whether a string begins with the given prefix.\n\n**Params**\n\n* `prefix` **{String}**\n* `testString` **{String}**\n* `options` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{#startsWith \"Goodbye\" \"Hello, world!\"}}\n  Whoops\n{{else}}\n  Bro, do you even hello world?\n{{/startsWith}}\n```\n\n### [{{titleize}}](lib/string.js#L445)\n\nTitle case the given string.\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n**Example**\n\n```handlebars\n{{titleize \"this is title case\"}}\n//=> 'This Is Title Case'\n```\n\n### [{{trim}}](lib/string.js#L475)\n\nRemoves extraneous whitespace from the beginning and end of a string.\n\n**Params**\n\n* `string` **{String}**: The string to trim.\n* `returns` **{String}**\n\n**Example**\n\n```js\n{{trim \" ABC \"}}\n//=> 'ABC'\n```\n\n### [{{uppercase}}](lib/string.js#L494)\n\nUppercase all of the characters in the given string. If used as a\nblock helper it will uppercase the entire block. This helper\ndoes not support inverse blocks.\n\n**Params**\n\n* `str` **{String}**: The string to uppercase\n* `options` **{Object}**: Handlebars options object\n* `returns` **{String}**\n\n## url\n\n### [{{encodeURI}}](lib/url.js#L22)\n\nEncodes a Uniform Resource Identifier (URI) component\nby replacing each instance of certain characters by\none, two, three, or four escape sequences representing\nthe UTF-8 encoding of the character.\n\n**Params**\n\n* `str` **{String}**: The un-encoded string\n* `returns` **{String}**: The endcoded string\n\n### [{{decodeURI}}](lib/url.js#L34)\n\nDecode a Uniform Resource Identifier (URI) component.\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n### [{{urlResolve}}](lib/url.js#L48)\n\nTake a base URL, and a href URL, and resolve them as a\nbrowser would for an anchor tag.\n\n**Params**\n\n* `base` **{String}**\n* `href` **{String}**\n* `returns` **{String}**\n\n### [{{urlParse}}](lib/url.js#L60)\n\nParses a `url` string into an object.\n\n**Params**\n\n* `str` **{String}**: URL string\n* `returns` **{String}**: Returns stringified JSON\n\n### [{{stripQuerystring}}](lib/url.js#L73)\n\nStrip the query string from the give `url`.\n\n**Params**\n\n* `url` **{String}**\n* `returns` **{String}**\n\n***\n\n## Utils\n\nThe following utils are exposed on `.utils`.\n\n### [{{toRegex}}](lib/utils/index.js#L56)\n\nConverts a \"regex-string\" to an actual regular expression.\n\n**Params**\n\n* `value` **{Object}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nutils.toRegex('\"/foo/\"');\n//=> /foo/\n```\n\n### [{{isRegex}}](lib/utils/index.js#L69)\n\nReturns true if the given value appears to be a\nregular expression.\n\n**Params**\n\n* `value` **{Object}**\n* `returns` **{Boolean}**\n\n### [{{changecase}}](lib/utils/index.js#L111)\n\nChange casing on the given `string`, optionally passing a delimiter to use between words in the returned string.\n\n**Params**\n\n* `string` **{String}**: The string to change.\n* `returns` **{String}**\n\n**Example**\n\n```js\nutils.changecase('fooBarBaz');\n//=> 'foo bar baz'\n\nutils.changecase('fooBarBaz' '-');\n//=> 'foo-bar-baz'\n```\n\n### [{{random}}](lib/utils/index.js#L137)\n\nGenerate a random number\n\n**Params**\n\n* `min` **{Number}**\n* `max` **{Number}**\n* `returns` **{Number}**\n\n### [{{isUndefined}}](lib/utils/index.js#L150)\n\nReturns true if the given value is `undefined` or\nis a handlebars options hash.\n\n**Params**\n\n* `value` **{any}**\n* `returns` **{Boolean}**\n\n### [{{isOptions}}](lib/utils/index.js#L163)\n\nReturns true if the given value appears to be an **options** object.\n\n**Params**\n\n* `value` **{Object}**\n* `returns` **{Boolean}**\n\n### [{{getArgs}}](lib/utils/index.js#L175)\n\nGet options from the options hash and `this`.\n\n**Params**\n\n* `app` **{Object}**: The current application instance.\n* `returns` **{Object}**\n\n### [{{isObject}}](lib/utils/index.js#L206)\n\nReturns true if the given value is an object\nand not an array.\n\n**Params**\n\n* `value` **{any}**\n* `returns` **{Boolean}**\n\n### [{{isEmpty}}](lib/utils/index.js#L219)\n\nReturns true if the given value is empty.\n\n**Params**\n\n* `value` **{any}**\n* `returns` **{Boolean}**\n\n### [{{tryParse}}](lib/utils/index.js#L242)\n\nTry to parse the given `string` as JSON. Fails\ngracefully if the value cannot be parsed.\n\n**Params**\n\n* `string` **{String}**\n* `returns` **{Object}**\n\n### [{{result}}](lib/utils/index.js#L258)\n\nReturn the given value. If the value is a function\nit will be called, and the result is returned.\n\n**Params**\n\n* `val` **{any}**\n* `returns` **{any}**\n\n### [{{identity}}](lib/utils/index.js#L273)\n\nReturn the given value, unchanged.\n\n**Params**\n\n* `val` **{any}**\n* `returns` **{any}**\n\n### [{{isString}}](lib/utils/index.js#L285)\n\nReturn true if `val` is a string.\n\n**Params**\n\n* `val` **{any}**: The value to check\n* `returns` **{Boolean}**\n\n### [{{arrayify}}](lib/utils/index.js#L297)\n\nCast `val` to an array.\n\n**Params**\n\n* `val` **{any}**: The value to arrayify.\n* `returns` **{Array}**\n\n***\n\n## Related projects\n\nYou might also be interested in these projects:\n\n* [assemble](https://www.npmjs.com/package/assemble): Assemble is a powerful, extendable and easy to use static site generator for node.js. Used… [more](https://www.npmjs.com/package/assemble) | [homepage](https://github.com/assemble/assemble)\n* [template-helpers](https://www.npmjs.com/package/template-helpers): Generic JavaScript helpers that can be used with any template engine. Handlebars, Lo-Dash, Underscore, or… [more](https://www.npmjs.com/package/template-helpers) | [homepage](https://github.com/jonschlinkert/template-helpers)\n* [utils](https://www.npmjs.com/package/utils): Fast, generic JavaScript/node.js utility functions. | [homepage](https://github.com/jonschlinkert/utils)\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/assemble/handlebars-helpers/issues/new).\n\n## Building docs\n\nGenerate readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install verb && npm run docs\n```\n\nOr, if [verb](https://github.com/verbose/verb) is installed globally:\n\n```sh\n$ verb\n```\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n## Author\n\n**Brian Woodward**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nWhen this project was created some helpers were sourced from [Swag, by Elving Rodriguez](http://elving.github.com/swag/).\nReleased under the [MIT license](https://github.com/assemble/handlebars-helpers/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on May 13, 2016._",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assemble/handlebars-helpers.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "verb": {
    "copyright": {
      "start": "2013"
    },
    "helpers": [
      "helper-coverage"
    ],
    "layout": "default",
    "lint": {
      "reflinks": true
    },
    "plugins": [
      "gulp-format-md"
    ],
    "reflinks": [
      "assemble",
      "handlebars",
      "remarkable",
      "verb"
    ],
    "related": {
      "list": [
        "assemble",
        "template-helpers",
        "utils"
      ]
    },
    "run": true,
    "tasks": [
      "readme"
    ],
    "toc": true
  },
  "version": "0.6.0"
}
