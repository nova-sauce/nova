@mixin line-height($ps-value, $font-size) {
  @if $ps-value == auto {
    $line-height: 1.2 * $font-size;
    line-height: $line-height#{px};
    line-height: rem($line-height);
    /* @include rem(line-height, $line-height); */
  } @else {
    $line-height: $font-size + ($ps-value / 2);
    line-height: $line-height#{px};
    line-height: rem($line-height);
    /* @include rem(line-height, $line-height); */
  }
}
@mixin letter-spacing($ps-value, $font-size) {
  letter-spacing: (($ps-value * $font-size) / 1000) + px;
  letter-spacing: ($ps-value / 1000) + rem;
}
@mixin drop-shadow($angle: 0, $distance: 0, $spread: 0, $size: 0, $color: #000, $inner: false) {
  $angle: (180 - $angle) * pi() / 180; // convert to radians
  $h-shadow: round(cos($angle) * $distance);
  $v-shadow: round(sin($angle) * $distance);
  $css-spread: $size * $spread/100;
  $blur: ($size - $css-spread);
  $inset: if($inner != false, 'inset', '');
  @include box-shadow($h-shadow $v-shadow $blur $css-spread $color unquote($inset));
}
@mixin background-cover-image($image:null, $bprs:true, $type:jpg) {
  @if ($image) {
    background-image: url("#{$image-path}/#{$image}.#{$type}");
  }
  @if $bprs == true {
    background-repeat: no-repeat;
    background-size: cover;
  }
}
@mixin background-icon($name, $svg:true) {
  $fallback-extension: 'png' !default;
  background-image: url("#{$image-path}/#{$name}.#{$fallback-extension}");
  @if $svg == true {
    background-image: url("#{$svg-path}/#{$name}.svg"), none;
  }
  background-repeat: no-repeat;
  @content;
}
@function pc($target, $context, $padding:0) {
  @return ($target / ($context - $padding)) * 100%;
}
@mixin rspw($max-width, $context, $padding:0, $margin:0) {
  @if ($context) {
    @if ($max-width) {
      $newcontext: ($context - $padding - $margin);
      max-width: #{$max-width}px;
      width: pc($max-width, $newcontext);
    }
  }
}
@mixin clearfix {
  &:after {
    clear: both;
    content: '';
    display: table;
  }
}
@function rem($pixels, $context: 16) {
  @return #{$pixels / $context}rem;
}
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: $base-font-size;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and unit($value) == px {
      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and unit($value) == "%" {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}
/// build a button based on a theme from
/// $button-themes map
/// @param $name - button name
/// @param $theme [primary] - the theme to use from the map
@mixin make-button($name, $theme: 'primary') {
  $values: map-get($button-themes, $theme);
  @extend %Teko;
  text-transform: uppercase;
  @content;
  @if $theme != 'inline' {
    background-color: map-get($values, bgColor);
    color: map-get($values, color);
    display: inline-block;
    font-size: map-get($values, fontSize);
    line-height: map-get($values, lineHeight);
    min-width: 122px;
    position: map-get($values, position);
    text-align: center;
    transform: skew(-22deg, 0deg);
    > span, .pager__item, .pager-next, .name {
      display: block;
      @if $theme == 'primary' {
          padding: 8px 20px 5px 22px;
      } @else {
        padding: 10px 20px 6px 22px;
      }
      transform: skew(22deg, 0deg);
    }
    a {
      color: map-get($values, color);
      display: block;
      text-decoration: none;
      &:hover {
        color: map-get($values, color);
      }
      &[data-product-type="soldout"] {
        color: $slate;
        cursor: default;
        &:hover {
          color: $slate;
        }
      }
    }
  } @else {
    color: map-get($values, color);
    font-size: map-get($values, fontSize);
    line-height: map-get($values, lineHeight);
    a {
      color: map-get($values, color);
      display: block;
      text-decoration: underline;
    }
  }
}
@mixin font($font-weight: $base-font-weight, $font-family: $primary-font-family) {
  font-family: $font-family;
  font-weight: $font-weight;
}
@mixin breakpoint($breakpoint:null, $min-max:max) {
  @if ($breakpoint) {
    $rem: ($breakpoint / 16) + rem;
    @if $min-max == 'min' {
      @media screen and (min-width: #{$rem}) {
        @content;
      }
    } @else {
      @media screen and (max-width: #{$rem}) {
        @content;
      }
    }
  }
}
